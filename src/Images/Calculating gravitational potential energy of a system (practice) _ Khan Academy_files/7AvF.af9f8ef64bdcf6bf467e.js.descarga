(window.webpackJsonp=window.webpackJsonp||[]).push([["7AvF"],{M7TR:function(e,t,r){"use strict";var o=r("284h");Object.defineProperty(t,"__esModule",{value:!0}),t.endOfTaskProps=function(e,t){const r=Math.max(t.pointsEarned-e.pointBounty,0),o=t.attemptHistory.length,n=t.attemptHistory.filter((e=>e.correct)).length,c=Math.round(n/o*100),p=e.exerciseDescriptors[0],l=p&&e.infoByExercise[p].initialFpmLevel,m=p&&t.progressByExercise[p].currentFpmLevel,d=p&&e.infoByExercise[p].maximumExerciseProgressDt;let u;e.promotionCriteria&&"percent_correct"===e.promotionCriteria.name&&(u=Math.ceil(o*(e.promotionCriteria.value/100)));return{normalPoints:r,pointBounty:e.pointBounty,pointsEarned:t.pointsEarned,problemSummaryText:i.ngettext("%(num)s problem answered %(percentCorrect)s% correctly","%(num)s problems answered %(percentCorrect)s% correctly",o,{percentCorrect:c}),percentCorrect:c,correctProblems:n,completionCriteria:e.completionCriteria,promotionCriteria:e.promotionCriteria,numRequiredForPromotion:u,problemInfo:a(e,t),taskAttemptHistory:t.attemptHistory,taskId:e.taskId,taskSlug:e.taskSlug,taskType:e.taskType,initialFpmLevel:l,finalFpmLevel:m,maximumExerciseProgressDt:d,exercises:s(e,t)}},t.getShuffleSeed=function(e,t,r){const{nodeSlug:o,totalDone:i}=(0,n.getCurrentExerciseData)({taskInfo:e,taskProgress:t}),s=function(e){const t=e.split("").reduce((function(e,t){return(e=(e<<5)-e+t.charCodeAt(0))&e}),0);return Math.abs(t)}(o)+i;if(r.problemComplete)return s;return s+1},t.KEYPAD_ANIMATION_DURATION=void 0;var i=o(r("HEOz")),n=r("sbZd");function s(e,t){const r=e.exerciseNames;return r&&r.map(((r,o)=>{const i=e.infoByExercise[r].initialFpmLevel,n=t.progressByExercise[r].currentFpmLevel;return{exerciseModel:e.infoByExercise[r],correct:t.attemptHistory[o].correct,initialFpmLevel:i,finalFpmLevel:n}}))}function a(e,t){const{completedAssessmentItems:r}=t;if(t.taskComplete&&("topic_quiz"===e.taskType||"topic_unit_test"===e.taskType)){const{infoByExercise:t}=e;return function(e,t){return e.map((e=>{const{exerciseName:r,metadata:o}=e,{id:i,problemType:n}=o,{title:s,relatedVideos:a,translatedProblemTypes:c}=t[r],p=a.filter((e=>{for(const t of c)if(t.name!==n&&t.relatedVideos){if(t.relatedVideos.find((t=>t.id===e.id)))return!1}return!0}));return{exerciseTitle:s,itemId:i,problemType:n,relatedVideos:p}}))}(r,t)}const{title:o,relatedVideos:i,translatedProblemTypes:s}=(0,n.getCurrentExerciseData)({taskInfo:e,taskProgress:t});if(!s)return[];const a={};s.forEach((e=>{!a[e.name]&&e.relatedVideos&&(a[e.name]=e.relatedVideos.map((e=>i.find((t=>t.id===e)))).filter((e=>e)))}));const c=i.filter((e=>{for(const t of s)if(t.relatedVideos){if(t.relatedVideos.find((t=>t.id===e.id)))return!1}return!0})),p=s.map((e=>e.items.map((t=>({exerciseTitle:o,itemId:t.id,problemType:e.name,relatedVideos:(a[e.name]||[]).concat(c)})))));return Array.prototype.concat.apply([],p)}t.KEYPAD_ANIMATION_DURATION=200}}]);
//# sourceMappingURL=../../sourcemaps/en/7AvF.af9f8ef64bdcf6bf467e.js.map